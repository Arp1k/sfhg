import os
from threading import Thread
import telebot
from telebot import types
import time

TOKEN = '6893596394:AAFxiXHDJ_QypG6GkXCE9tjUZ7wMn2gcz2U'

bot = telebot.TeleBot(TOKEN)
user_answers = {}
users = {}

def keep_alive():
    while True:
        try:
            bot.get_me()
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∑–∞–ø–∏—Ç—É –¥–æ Telegram API: {e}")
        time.sleep(3600)
bot_running = False
waiting_for_chat_id = False
target_chat_id = None
def run_bot():
    global bot_running
    bot_running = True
    bot.polling()
    bot_running = False
# –°—Ç–∞–Ω –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è
waiting_for_message = False
message_to_send = None
waiting_for_chat_id = False
target_chat_id = None
target_admin_id = None

# –°—Ç–∞–Ω –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è
waiting_for_message = False
message_to_send = None

def is_admin(chat_id):
    return str(chat_id) in ADMINS

@bot.message_handler(commands=['send'])
def handle_send_command(message):
    global waiting_for_chat_id, target_admin_id
    if is_admin(message.chat.id):
        waiting_for_chat_id = True
        target_admin_id = message.chat.id
        bot.reply_to(message, "–ù–∞–¥—ñ—à–ª—ñ—Ç—å chat_id –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫–æ–º—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–±–æ —Ñ–æ—Ç–æ.")
    else:
        bot.reply_to(message, "–í–∏ –Ω–µ –º–∞—î—Ç–µ –ø—Ä–∞–≤ –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")

@bot.message_handler(func=lambda message: waiting_for_chat_id and is_admin(message.chat.id), content_types=['text'])
def handle_chat_id(message):
    global waiting_for_chat_id, target_chat_id, waiting_for_message
    try:
        chat_id = int(message.text)
        target_chat_id = chat_id
        waiting_for_chat_id = False
        waiting_for_message = True
        bot.reply_to(message, "–ù–∞–¥—ñ—à–ª—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–±–æ —Ñ–æ—Ç–æ, —è–∫–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ.")
    except ValueError:
        bot.reply_to(message, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π chat_id. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

@bot.message_handler(func=lambda message: waiting_for_message and is_admin(message.chat.id), content_types=['text', 'photo'])
def handle_message_to_send(message):
    global waiting_for_message, message_to_send
    if message.content_type == 'text':
        message_to_send = message.text
    elif message.content_type == 'photo':
        message_to_send = message.photo[-1].file_id
    waiting_for_message = False
    try:
        if message.content_type == 'text':
            bot.send_message(target_chat_id, message_to_send)
        elif message.content_type == 'photo':
            bot.send_photo(target_chat_id, message_to_send)
        bot.reply_to(message, "–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ.")
    except Exception as e:
        bot.reply_to(message, f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")

@bot.message_handler(func=lambda message: message.chat.id == target_chat_id, content_types=['text', 'photo'])
def forward_message_to_admin(message):
    try:
        if message.content_type == 'text':
            bot.forward_message(target_admin_id, message.chat.id, message.message_id)
        elif message.content_type == 'photo':
            bot.forward_message(target_admin_id, message.chat.id, message.message_id)
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É {target_admin_id}: {e}")

ADMINS = ['1580990462', '5210739777']
def delete_message(chat_id, message_id):
    try:
        bot.delete_message(chat_id, message_id)
    except Exception as e:
        print("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:", e)

def create_rating_keyboard(callback_prefix):
    markup = types.InlineKeyboardMarkup(row_width=5)
    buttons = [types.InlineKeyboardButton(text=str(i), callback_data=f"{callback_prefix}_{i}") for i in range(11)]
    markup.add(*buttons)
    return markup

def send_start_message():
    chat_ids = [1580990462, 5210739777]

    for chat_id in chat_ids:
        try:
            bot.send_message(chat_id, "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π!")
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É {chat_id}: {e}")
@bot.message_handler(commands=['help'])
def handle_help(message):
    chat_id = message.chat.id
    bot.send_message(chat_id, "–ù–∞–ø–∏—à—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –ø—Ä–∏—á–∏–Ω—É –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è:")
    bot.register_next_step_handler(message, handle_help_reason)

def handle_help_reason(message):
    chat_id = message.chat.id
    reason = message.text
    for admin_id in ADMINS:
        bot.send_message(admin_id, f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ {chat_id} –∑–≤–µ—Ä–Ω—É–≤—Å—è –ø–æ —Ç–∞–∫—ñ–π –ø—Ä–∏—á–∏–Ω—ñ: {reason}")
def create_skin_state_keyboard():
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    buttons = [
        types.InlineKeyboardButton(text="üå±1 —Ç–∏–ø", callback_data="skin_type_dry"),
        types.InlineKeyboardButton(text="üå±2 —Ç–∏–ø", callback_data="skin_type_normal"),
        types.InlineKeyboardButton(text="üå±3 —Ç–∏–ø", callback_data="skin_type_1"),
        types.InlineKeyboardButton(text="üå±4 —Ç–∏–ø", callback_data="skin_type_2"),
        types.InlineKeyboardButton(text="üå±5 —Ç–∏–ø", callback_data="skin_type_3")
    ]
    keyboard.add(*buttons)
    return keyboard

@bot.message_handler(commands=['start'])
def send_welcome(message):
    chat_id = message.chat.id
    users[chat_id] = message.chat.username  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É —Å–ª–æ–≤–Ω–∏–∫—É
    user = message.from_user
    if user.username:
        username = user.username
    else:
        username = str(chat_id)

    bot.send_message(1580990462, f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {username} {chat_id} —Ä–æ–∑–ø–æ—á–∞–≤ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è.")
    bot.send_message(5210739777, f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {username} —Ä–æ–∑–ø–æ—á–∞–≤ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è.")
    markup = types.InlineKeyboardMarkup()
    btn_start = types.InlineKeyboardButton(text='–†–æ–∑–ø–æ—á–∞—Ç–∏', callback_data='start')
    markup.add(btn_start)

    bot.send_message(message.chat.id, "<b>–í—ñ—Ç–∞—é</b> üòç\n\n"
                                      "–Ø –¥–æ–ø–æ–º–æ–∂—É –í–∞–º —à–≤–∏–¥–∫–æ –∑'—è—Å—É–≤–∞—Ç–∏ <b>–í–∞—à</b> —Ç–∏–ø —Ç–∞ —Å—Ç–∞–Ω —à–∫—ñ—Ä–∏.\n\n"
                                      "–ê–ª–µ –ø–µ—Ä–µ–¥ —Ü–∏–º, —Ö–æ—á—É —Å–∫–∞–∑–∞—Ç–∏, <b>—â–æ —è –±–µ–∑–º–µ–∂–Ω–æ –≤–¥—è—á–Ω–∞ –∑–∞ –¥–æ–≤—ñ—Ä—É</b> ‚ò∫Ô∏è\n\n"
                                      "–¶—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –¥–æ–ø–æ–º–æ–∂–µ –í–∞–º –±—ñ–ª—å—à —Ç–æ—á–Ω–æ —Ä–æ–∑—É–º—ñ—Ç–∏ –ø–æ—Ç—Ä–µ–±–∏ —à–∫—ñ—Ä–∏ —Ç–∞ –≤–¥–∞–ª–æ –ø—ñ–¥–±–∏—Ä–∞—Ç–∏ –¥–æ–≥–ª—è–¥.\n\n"
                                      "<b>–¢–æ–º—É –ø—Ä–æ–ø–æ–Ω—É—é –Ω–µ –≤—Ç—Ä–∞—á–∞—Ç–∏ —á–∞—Å —ñ –ø—Ä–æ—Ç–µ—Å—Ç—É–≤–∞—Ç–∏ –í–∞—à—É —à–∫—ñ—Ä—É –ø—Ä–æ—Å—Ç–æ –∑–∞—Ä–∞–∑</b> üëá",
                     parse_mode='HTML', reply_markup=markup)

    # –ü–æ—Ç—Ä—ñ–±–Ω–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –æ–∫—Ä–µ–º–∏–π –∑–∞–ø–∏—Å —É —Å–ª–æ–≤–Ω–∏–∫—É user_answers –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    user_answers[chat_id] = {}

@bot.callback_query_handler(func=lambda call: call.data == 'start')
def callback_query_start(call):
    if call.data == 'start':
        bot.send_message(call.message.chat.id, "<b>–ù–∏–∂—á–µ –í–∞–º –±—É–¥—É—Ç—å –ø–æ–¥–∞–Ω—ñ –æ–ø–∏—Å–∏ —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø—ñ–≤ —à–∫—ñ—Ä–∏üëá</b>\n\n"
                                               "–£–≤–∞–∂–Ω–æ <b>–ø—Ä–æ—á–∏—Ç–∞–π—Ç–µ</b> —ó—Ö <b>—Ç–∞ –æ–±–µ—Ä—ñ—Ç—å</b> –ø—É–Ω–∫—Ç, —è–∫–∏–π –±—É–¥–µ –Ω–∞–π–±—ñ–ª—å—à —Ç–æ—á–Ω–æ –æ–ø–∏—Å—É–≤–∞—Ç–∏ –í–∞—à—ñ –≤—ñ–¥—á—É—Ç—Ç—è —Ç–∞ –≤–∏–≥–ª—è–¥ –í–∞—à–æ—ó —à–∫—ñ—Ä–∏.\n\n"
                                               "üìé<b>–¢–∏–ø —à–∫—ñ—Ä–∏ –Ω–µ –¥–æ—Ä—ñ–≤–Ω—é—î —Å—Ç–∞–Ω —à–∫—ñ—Ä–∏</b>\n"
                                               "üìé<b>–¢–∏–ø —à–∫—ñ—Ä–∏ –Ω–µ –∑–º—ñ–Ω—é—î—Ç—å—Å—è –ø—Ä–æ—Ç—è–≥–æ–º –∂–∏—Ç—Ç—è</b>", parse_mode='HTML')
        delete_message(call.message.chat.id, call.message.message_id)
        time.sleep(9)
        bot.send_message(call.message.chat.id, "–î–ª—è –∫—Ä–∞—â–æ–≥–æ —Ä–æ–∑—É–º—ñ–Ω–Ω—è –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –ø—É–Ω–∫—Ç—ñ–≤, –ø—Ä–æ–ø–æ–Ω—É—é –æ–∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—å —ñ–∑ –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏")
        time.sleep(2)
        file_id = ' photo_2024-04-08_17-40-36.jpg'
        photo = open('photo_2024-04-08_17-40-36.jpg', 'rb')
        photo1 = open('photo_2024-04-08_17-40-32.jpg', 'rb')
        bot.send_photo(call.message.chat.id, photo1)
        bot.send_photo(call.message.chat.id, photo,"–í—ñ–¥–∫—Ä–∏—Ç—ñ –∫–æ–º–µ–¥–æ–Ω–∏")
        time.sleep(5)
        photo2 = open('photo_2024-04-08_18-02-54.jpg', 'rb')
        bot.send_photo(call.message.chat.id, photo2,"–ó–∞–∫—Ä–∏—Ç—ñ –∫–æ–º–µ–¥–æ–Ω–∏")
        time.sleep(5)
        photo3 = open('photo_2024-04-08_18-03-01.jpg', 'rb')
        bot.send_photo(call.message.chat.id, photo3,"–°–∞–ª—å–Ω—ñ –Ω–∏—Ç–∫–∏")
        time.sleep(5)
        photo4 = open('photo_2024-04-08_18-03-14.jpg', 'rb')
        bot.send_photo(call.message.chat.id, photo4,"–ú—ñ–ª—ñ—É–º–∏")
        time.sleep(5)
        photo5 = open('photo_2024-04-08_18-03-24.jpg', 'rb')
        bot.send_photo(call.message.chat.id, photo5,"–ü–æ—Ä–∏")
        time.sleep(5)
        bot.send_message(call.message.chat.id, "<b>üå±1 —Ç–∏–ø</b>\n"
                                               "‚¶Å —à–∫—ñ—Ä–∞ –º–∞—Ç–æ–≤–∞, —è–∫—â–æ –æ–¥—Ä–∞–∑—É –Ω–µ –Ω–∞–Ω–µ—Å—Ç–∏ –∑–≤–æ–ª–æ–∂–µ–Ω–Ω—è, –º–∞–ª–æ –≤–ª–∞—Å–Ω–∏—Ö –ª—ñ–ø—ñ–¥—ñ–≤;\n"
                                               "‚¶Å –ø—ñ—Å–ª—è –æ—á–∏—â–µ–Ω–Ω—è —Ö–æ—á–µ—Ç—å—Å—è –æ–¥—Ä–∞–∑—É –Ω–∞–Ω–µ—Å—Ç–∏ –∫—Ä–µ–º;\n"
                                               "‚¶Å –Ω–µ–º–∞—î –ø—Ä–æ–±–ª–µ–º –∑ –∫–æ–º–µ–¥–æ–Ω–∞–º–∏ (–ø–æ–æ–¥–∏–Ω–æ–∫—ñ –º–æ–∂–ª–∏–≤—ñ);\n"
                                               "‚¶Å –ø–æ—Ä–∏ –º–∞–ª–æ–≤–∏—Ä–∞–∂–µ–Ω—ñ (–∑ –≤—ñ–∫–æ–º –≤–∏—Ä–∞–∂–µ–Ω—ñ—Å—Ç—å –ø–æ—Ä –∑—Ä–æ—Å—Ç–∞—î —É –≤—Å—ñ—Ö —Ç–∏–ø—ñ–≤ —à–∫—ñ—Ä–∏).",
                          parse_mode='HTML')
        time.sleep(9)
        bot.send_message(call.message.chat.id, "<b>üå±2 —Ç–∏–ø</b>\n"
                                               "‚¶Å –ø—Ä–∏—Ä–æ–¥–Ω–∏–π –ø–æ–º—ñ—Ä–Ω–∏–π –±–ª–∏—Å–∫ (–Ω—ñ —Å—É—Ö–∞, –Ω—ñ –∂–∏—Ä–Ω–∞);\n"
                                               "‚¶Å –Ω–µ–º–∞—î –¥–∏—Å–∫–æ–º—Ñ–æ—Ä—Ç—É, –≤—ñ–¥—á—É—Ç—Ç—è —Å—É—Ö–æ—Å—Ç—ñ —ñ –Ω–∞–≥–∞–ª—å–Ω–æ—ó –ø–æ—Ç—Ä–µ–±–∏ —É –∑–≤–æ–ª–æ–∂–µ–Ω–Ω—ñ –ø—ñ—Å–ª—è –æ—á–∏—â–µ–Ω–Ω—è;\n"
                                               "‚¶Å –Ω–µ–º–∞—î –ø—Ä–æ–±–ª–µ–º–∏ –∑ –∫–æ–º–µ–¥–æ–Ω–∞–º–∏ (–æ–¥–∏–Ω–∏—á–Ω—ñ –º–æ–∂—É—Ç—å –±—É—Ç–∏, —è–∫ —ñ –≤–∏—Å–∏–ø–∏), –≤—Å—ñ –ø—Ä–æ—Ü–µ—Å–∏ –≤—ñ–¥–±—É–≤–∞—é—Ç—å—Å—è –∫–æ—Ä–µ–∫—Ç–Ω–æ.",
                          parse_mode='HTML')
        time.sleep(9)
        bot.send_message(call.message.chat.id, "<b>üå±3 —Ç–∏–ø</b>\n"
                                               "‚¶Å —à–∫—ñ—Ä–∞ –º–∞—î –Ω–∞–¥–º—ñ—Ä–Ω–∏–π –∂–∏—Ä–Ω–∏–π –±–ª–∏—Å–∫;\n"
                                               "‚¶Å –ª–µ–≥–∫–æ –æ–±—Ö–æ–¥–∏—Ç—å—Å—è –±–µ–∑ –∑–≤–æ–ª–æ–∂–µ–Ω–Ω—è –ø—ñ—Å–ª—è –æ—á–∏—â–µ–Ω–Ω—è;\n"
                                               "‚¶Å —Å–µ–±—É–º –≤—ñ–ª—å–Ω–æ –≤–∏—Ö–æ–¥–∏—Ç—å –∑ –ø—Ä–æ—Ç–æ–∫ —Å–∞–ª—å–Ω–∏—Ö –∑–∞–ª–æ–∑, —Ä—ñ–¥–∫–æ —î –∫–æ–º–µ–¥–æ–Ω–∏ –∞–±–æ –æ–¥–∏–Ω–∏—á–Ω—ñ.",
                          parse_mode='HTML')
        time.sleep(9)
        bot.send_message(call.message.chat.id, "<b>üå±4 —Ç–∏–ø</b>\n"
                                               "‚¶Å —Å–µ–±—É–º –≥—É—Å—Ç–∏–π —ñ —Å–∫–ª–∞–¥–Ω–æ –≤–∏—Ö–æ–¥–∏—Ç—å –∑ –ø—Ä–æ—Ç–æ–∫ —Å–∞–ª—å–Ω–∏—Ö –∑–∞–ª–æ–∑ (—á–µ—Ä–µ–∑ —Ü–µ —î –∑–Ω–µ–≤–æ–¥–Ω–µ–Ω—ñ, —Å—É—Ö—ñ –¥—ñ–ª—è–Ω–∫–∏);\n"
                                               "‚¶Å –ø—Ä–æ–±–ª–µ–º–∞ –∑–∞–∫—Ä–∏—Ç–∏—Ö –∫–æ–º–µ–¥–æ–Ω—ñ–≤;\n"
                                               "‚¶Å —á–∞—Å—Ç–µ –≤—ñ–¥—á—É—Ç—Ç—è —Å—Ç—è–≥–Ω—É—Ç–æ—Å—Ç—ñ, –ª—É—â–µ–Ω–Ω—è, –ø–æ—Ä—É—à–µ–Ω–∏–π –∑–∞—Ö–∏—Å–Ω–∏–π –±–∞—Ä'—î—Ä.",
                          parse_mode='HTML')
        time.sleep(9)
        bot.send_message(call.message.chat.id, "<b>üå±5 —Ç–∏–ø</b>\n"
                                               "‚¶Å —î –¥—ñ–ª—è–Ω–∫–∏ —ñ–∑ –∫–æ–º–µ–¥–æ–Ω–∞–º–∏, —ñ–∑ –∑–∞–ø–∞–ª–µ–Ω–Ω—è–º–∏;\n"
                                               "‚¶Å —î –∂–∏—Ä–Ω—ñ —Ç–∞ –∑–Ω–µ–≤–æ–¥–Ω–µ–Ω—ñ –¥—ñ–ª—è–Ω–∫–∏.", parse_mode='HTML')
        time.sleep(6)
        bot.send_message(call.message.chat.id, "–ü—Ä–æ—á–∏—Ç–∞–≤—à–∏ –æ–ø–∏—Å –∫–æ–∂–Ω–æ–≥–æ —Ç–∏–ø—É, <b>–æ–±–µ—Ä—ñ—Ç—å –ø—É–Ω–∫—Ç</b>, —è–∫–∏–π –±—É–¥–µ –Ω–∞–π–±—ñ–ª—å—à —Ç–æ—á–Ω–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É–≤–∞—Ç–∏ –í–∞—à —Ç–∏–ø —à–∫—ñ—Ä–∏ üëá", reply_markup=create_skin_state_keyboard(), parse_mode='HTML')

@bot.callback_query_handler(func=lambda call: call.data.startswith('skin_type_'))
def callback_query_skin_type(call):
    chat_id = call.message.chat.id
    user_answers[chat_id] = {"skin_type": call.data.split('_')[-1]}
    bot.send_message(chat_id, "<b>–î—è–∫—É—é ü§ç</b>\n"
                              "–í–∞—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—Ä–∞—Ö–æ–≤–∞–Ω–∞", parse_mode='HTML')
    time.sleep(3)
    bot.send_message(chat_id, "–Ü–¥–µ–º–æ –¥–∞–ª—ñ ‚úÖ", parse_mode='HTML')
    time.sleep(2)

    bot.send_message(chat_id, "–ú–∏ –≤–∂–µ –∑'—è—Å—É–≤–∞–ª–∏, —â–æ <b>—Ç–∏–ø —à–∫—ñ—Ä–∏ —Å—Ç–∞–ª–∏–π,</b> –∞ –æ—Ç\n"
                              "<b>–°—Ç–∞–Ω —à–∫—ñ—Ä–∏ –º–æ–∂–µ –ø–µ—Ä—ñ–æ–¥–∏—á–Ω–æ –∑–º—ñ–Ω—é–≤–∞—Ç–∏—Å—å,</b>\n"
                              "–æ—Å–∫—ñ–ª—å–∫–∏ –Ω–∞ –Ω—å–æ–≥–æ –≤–ø–ª–∏–≤–∞—î –¥–æ–≥–ª—è–¥, –Ω–∞–≤–∫–æ–ª–∏—à–Ω—î —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ, —Å—Ç—Ä–µ—Å–∏.", parse_mode='HTML')
    time.sleep(9)
    bot.send_message(chat_id, "–í–∏ –º–æ–∂–µ—Ç–µ –≤—ñ–¥—á—É–≤–∞—Ç–∏, —â–æ –í–∞—à–∞ —à–∫—ñ—Ä–∞ –ø–µ—Ä–µ–±—É–≤–∞—î —É <b>–∑–Ω–µ–≤–æ–¥–Ω–µ–Ω–æ–º—É —Å—Ç–∞–Ω—ñ üí¶</b> –Ω–µ–∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –í–∞—à–æ–≥–æ —Ç–∏–ø—É —à–∫—ñ—Ä–∏.\n\n"
                              "–¶–µ —Å—Ç–∞–Ω, –∫–æ–ª–∏ <b>–í–∏ –≤—ñ–¥—á—É–≤–∞—î—Ç–µ</b>\n"
                              "‚¶Å —Å—É—Ö—ñ—Å—Ç—å\n"
                              "‚¶Å –º–æ–∂–ª–∏–≤–µ –ª—É—â–µ–Ω–Ω—è\n"
                              "‚¶Å –Ω–µ—Å—Ç–∞—á–∞ –≤–æ–ª–æ–≥–∏ —Ä–æ–≥–æ–≤–æ–º—É —à–∞—Ä—É —à–∫—ñ—Ä–∏.\n\n"
                              "–¶–µ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Å—Ç–∞–Ω —ñ –≤—ñ–Ω –¥–æ—Å–∏—Ç—å –ª–µ–≥–∫–æ –∫–æ—Ä–∏–≥—É—î—Ç—å—Å—è –¥–æ–≥–ª—è–¥–æ–º.", parse_mode='HTML')

    delete_message(chat_id, call.message.message_id)
    time.sleep(10)
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    buttons = [
        types.InlineKeyboardButton(text="–¢–∞–∫", callback_data="dehydration_yes"),
        types.InlineKeyboardButton(text="–ù—ñ", callback_data="dehydration_no")]
    keyboard.add(*buttons)
    bot.send_message(chat_id, "–ß–∏ –≤—ñ–¥—á—É–≤–∞—î—Ç–µ –≤–∏ –∑–Ω–µ–≤–æ–¥–Ω–µ–Ω—ñ—Å—Ç—å?", reply_markup=keyboard)
    time.sleep(1)

@bot.callback_query_handler(func=lambda call: call.data == 'dehydration_yes' or call.data == 'dehydration_no')
def callback_query_skin_condition_dehydration(call):
    chat_id = call.message.chat.id
    if chat_id not in user_answers:
        user_answers[chat_id] = {}

    if call.data == 'dehydration_yes':
        user_answers[chat_id]["dehydration"] = "yes"
    else:
        user_answers[chat_id]["dehydration"] = "no"

    bot.send_message(chat_id, "<b>–í–∞—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—Ä–∞—Ö–æ–≤–∞–Ω–∞ ‚úÖ</b>\n\n"
                              "–Ü –º–∏ –¥–æ—Å–ª—ñ–¥–∂—É—î–º–æ –¥–∞–ª—ñ)", parse_mode='HTML')
    time.sleep(1)
    delete_message(call.message.chat.id, call.message.message_id)
    time.sleep(1)
    bot.send_message(chat_id, "<b>–ú–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –∑ º—è—Å—É–≤–∞–Ω–Ω—è —Ä—ñ–≤–Ω—è —á—É—Ç–ª–∏–≤–æ—Å—Ç—ñ üëº –í–∞—à–æ—ó —à–∫—ñ—Ä–∏.</b>\n\n"
                              "–¶–µ —Å—Ç–∞–Ω, —è–∫–∏–π –º–æ–∂–µ –±—É—Ç–∏ –Ω–∞–±—É—Ç–∏–º (–Ω–∞—Å–ª—ñ–¥–∫–æ–º –≤–ø–ª–∏–≤—É –∑–æ–≤–Ω—ñ—à–Ω—ñ—Ö —Ñ–∞–∫—Ç–æ—Ä—ñ–≤).\n\n"
                              "–ê–±–æ –∂ –≤—Ä–æ–¥–∂–µ–Ω–∏–º (–≥–µ–Ω–µ—Ç–∏—á–Ω–∞ –æ—Å–æ–±–ª–∏–≤—ñ—Å—Ç—å)", parse_mode='HTML')
    bot.send_message(chat_id, "–î–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ä—ñ–≤–Ω—è —á—É—Ç–ª–∏–≤–æ—Å—Ç—ñ –í–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –æ—Ü—ñ–Ω–∏—Ç–∏ –∫–æ–∂–µ–Ω –ø—É–Ω–∫—Ç <b>–∑–∞ –¥–µ—Å—è—Ç–∏–±–∞–ª—å–Ω–æ—é —à–∫–∞–ª–æ—é</b>"
                              "(—É —Ä–∞–∑—ñ, —è–∫—â–æ –≤—ñ–¥—á—É—Ç—Ç—è –Ω–µ—Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω–µ, –ø—É–Ω–∫—Ç –æ—Ü—ñ–Ω—é—î—Ç—å—Å—è –≤ 0 –±–∞–ª—ñ–≤)üëå", parse_mode='HTML')
    time.sleep(1)
    bot.send_message(chat_id, "–û—Ü—ñ–Ω—ñ—Ç—å —Å—Ö–∏–ª—å–Ω—ñ—Å—Ç—å –í–∞—à–æ—ó —à–∫—ñ—Ä–∏ –¥–æ –ø–æ—á–µ—Ä–≤–æ–Ω—ñ–Ω—å", reply_markup=create_rating_keyboard("redness"))
    delete_message(chat_id, call.message.message_id)

@bot.callback_query_handler(func=lambda call: call.data.startswith('redness_'))
def callback_query_skin_redness(call):
    chat_id = call.message.chat.id
    user_answers[chat_id]["redness"] = int(call.data.split('_')[-1])
    bot.send_message(chat_id, "–ß–∏ –ø—Ä–∏—Ç–∞–º–∞–Ω–Ω–µ –í–∞–º –≤—ñ–¥—á—É—Ç—Ç—è —Ç–µ–ø–ª–∞ –≤ —à–∫—ñ—Ä—ñ? –Ø–∫–∞ —ñ–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ñ—Å—Ç—å?", reply_markup=create_rating_keyboard("heat_sensation"))
    delete_message(chat_id, call.message.message_id)

@bot.callback_query_handler(func=lambda call: call.data.startswith('heat_sensation'))
def callback_query_skin_redness(call):
    chat_id = call.message.chat.id
    user_answers[chat_id]["heat_sensation"] = int(call.data.split('_')[-1])
    bot.send_message(chat_id, "–ù–∞ —Å–∫—ñ–ª—å–∫–∏ –±–∞–ª—ñ–≤ –í–∏ –± –æ—Ü—ñ–Ω–∏–ª–∏ —Ä–æ–∑–¥—Ä–∞—Ç—É–≤–∞–Ω–Ω—è?", reply_markup=create_rating_keyboard("burning_sensation"))
    delete_message(chat_id, call.message.message_id)

@bot.callback_query_handler(func=lambda call: call.data.startswith('burning_sensation'))
def callback_query_skin_redness(call):
    chat_id = call.message.chat.id
    user_answers[chat_id]["burning_sensation"] = int(call.data.split('_')[-1])
    bot.send_message(chat_id, "–ß–∏ –≤—ñ–¥—á—É–≤–∞—î—Ç–µ –í–∏ —Å–≤–µ—Ä–±—ñ–∂? –û—Ü—ñ–Ω—ñ—Ç—å —ñ–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ñ—Å—Ç—å", reply_markup=create_rating_keyboard("itchiness"))
    delete_message(chat_id, call.message.message_id)

@bot.callback_query_handler(func=lambda call: call.data.startswith('itchiness'))
def callback_query_skin_redness(call):
    chat_id = call.message.chat.id
    user_answers[chat_id]["itchiness"] = int(call.data.split('_')[-1])
    bot.send_message(chat_id, "–û—Ü—ñ–Ω—ñ—Ç—å –≤—ñ–¥—á—É—Ç—Ç—è –±–æ–ª—é", reply_markup=create_rating_keyboard("pain"))
    delete_message(chat_id, call.message.message_id)

@bot.callback_query_handler(func=lambda call: call.data.startswith('pain'))
def callback_query_skin_redness(call):
    chat_id = call.message.chat.id
    user_answers[chat_id]["pain"] = int(call.data.split('_')[-1])
    bot.send_message(chat_id, "–Ø–∫—É –± –æ—Ü—ñ–Ω–∫—É –≤–∏ –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –∑–∞–≥–∞–ª—å–Ω–æ–º—É –≤—ñ–¥—á—É—Ç—Ç—é –¥–∏—Å–∫–æ–º—Ñ–æ—Ä—Ç—É?", reply_markup=create_rating_keyboard("discomfort"))
    delete_message(chat_id, call.message.message_id)

@bot.callback_query_handler(func=lambda call: call.data.startswith('discomfort'))
def callback_query_skin_redness(call):
    chat_id = call.message.chat.id
    user_answers[chat_id]["discomfort"] = int(call.data.split('_')[-1])
    bot.send_message(chat_id, "–ß–∏ –ø—Ä–∏—Ç–∞–º–∞–Ω–Ω–µ –í–∞–º –≤—ñ–¥—á—É—Ç—Ç—è –ø—Ä–∏–ª–∏–≤—ñ–≤ –∫—Ä–æ–≤—ñ? –û—Ü—ñ–Ω—ñ—Ç—å", reply_markup=create_rating_keyboard("blood_rush"))
    delete_message(chat_id, call.message.message_id)

@bot.callback_query_handler(func=lambda call: call.data.startswith('blood_rush'))
def callback_query_skin_redness(call):
    chat_id = call.message.chat.id
    user_answers[chat_id]["blood_rush"] = int(call.data.split('_')[-1])
    bot.send_message(chat_id, "–û—Ü—ñ–Ω—ñ—Ç—å –≤—ñ–¥—á—É—Ç—Ç—è –ø–µ—á—ñ–Ω–Ω—è", reply_markup=create_rating_keyboard("burning"))
    delete_message(chat_id, call.message.message_id)

@bot.callback_query_handler(func=lambda call: call.data.startswith('burning'))
def callback_query_skin_redness(call):
    chat_id = call.message.chat.id
    user_answers[chat_id]["burning"] = int(call.data.split('_')[-1])
    bot.send_message(chat_id, "–ù–∞ —Å–∫—ñ–ª—å–∫–∏ –±–∞–ª—ñ–≤ –í–∏ –æ—Ü—ñ–Ω–∏—Ç–µ –ø–æ–∫–æ–ª—é–≤–∞–Ω–Ω—è –í–∞—à–æ—ó —à–∫—ñ—Ä–∏, —è–∫—â–æ —Ç–∞–∫–µ –≤—ñ–¥—á—É—Ç—Ç—è –ø—Ä–∏—Å—É—Ç–Ω—î?", reply_markup=create_rating_keyboard("stinging"))
    delete_message(chat_id, call.message.message_id)

@bot.callback_query_handler(func=lambda call: call.data.startswith('stinging'))
def callback_query_skin_redness(call):
    chat_id = call.message.chat.id
    user_answers[chat_id]["stinging"] = int(call.data.split('_')[-1])
    bot.send_message(chat_id, "–£ —Å–∫—ñ–ª—å–∫–∏ –±–∞–ª—ñ–≤ –í–∏ –± –æ—Ü—ñ–Ω–∏–ª–∏ –≤—ñ–¥—á—É—Ç—Ç—è —Å—Ç—è–≥–Ω—É—Ç–æ—Å—Ç—ñ?", reply_markup=create_rating_keyboard("damag"))
    delete_message(chat_id, call.message.message_id)

@bot.callback_query_handler(func=lambda call: call.data.startswith('damag'))
def callback_query_skin_damag(call):
    chat_id = call.message.chat.id
    user_answers[chat_id]["damag"] = int(call.data.split('_')[-1])
    delete_message(chat_id, call.message.message_id)
    time.sleep(3)
    calculate_skin_condition(call.message)

def calculate_skin_condition(message):
    chat_id = message.chat.id
    if chat_id not in user_answers:
        return

    redness = user_answers[chat_id].get("redness", 0)
    heat_sensation = user_answers[chat_id].get("heat_sensation", 0)
    burning_sensation = user_answers[chat_id].get("burning_sensation", 0)
    itchiness = user_answers[chat_id].get("itchiness", 0)
    pain = user_answers[chat_id].get("pain", 0)
    discomfort = user_answers[chat_id].get("discomfort", 0)
    blood_rush = user_answers[chat_id].get("blood_rush", 0)
    burning = user_answers[chat_id].get("burning", 0)
    stinging = user_answers[chat_id].get("stinging", 0)
    damag = user_answers[chat_id].get("damag", 0)

    score = redness + heat_sensation + burning_sensation + itchiness + pain + discomfort + blood_rush + burning + stinging + damag

    skin_type = user_answers[chat_id].get("skin_type", "")
    dehydration = user_answers[chat_id].get("dehydration", "")

    if score <= 20:
        result = "–Ω–µ—á—É—Ç–ª–∏–≤–∞"
    elif 20 < score <= 60:
        result = "—á—É—Ç–ª–∏–≤–∞"
    else:
        result = "–Ω–∞–¥—Ç–æ —á—É—Ç–ª–∏–≤–∞ —ñ –ø–æ—Ç—Ä—ñ–±–Ω–∞ –æ–±–æ–≤'—è–∑–∫–æ–≤–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è –ª—ñ–∫–∞—Ä—è"

    if skin_type == "dry":
        skin_type_text = "–°—É—Ö–∏–π —Ç–∏–ø"
    elif skin_type == "normal":
        skin_type_text = "–ù–æ—Ä–º–∞–ª—å–Ω–∏–π —Ç–∏–ø"
    elif skin_type == "1":
        skin_type_text = "–ñ–∏—Ä–Ω–∏–π —Ç–∏–ø —ñ–∑ –∂–∏—Ä–Ω–æ—é —Å–µ–±–æ—Ä–µ—î—é"
    elif skin_type == "2":
        skin_type_text = "–ö–æ–º–±—ñ/–ñ–∏—Ä–Ω–∏–π —Ç–∏–ø —ñ–∑ —Å—É—Ö–æ—é —Å–µ–±–æ—Ä–µ—î—é"
    elif skin_type == "3":
        skin_type_text = "–ö–æ–º–±—ñ/–ñ–∏—Ä–Ω–∏–π —Ç–∏–ø —ñ–∑ –∑–º—ñ—à–∞–Ω–æ—é —Å–µ–±–æ—Ä–µ—î—é"
    else:
        skin_type_text = skin_type

    if dehydration == "yes":
        dehydration_text = "–ó–Ω–µ–≤–æ–¥–Ω–µ–Ω–∞"
    elif dehydration == "no":
        dehydration_text = "–ù–µ –∑–Ω–µ–≤–æ–¥–Ω–µ–Ω–∞"
    else:
        dehydration_text = ""

    user_answers[chat_id]["score"] = score
    user_answers[chat_id]["result"] = result
    user_answers[chat_id]["skin_type_text"] = skin_type_text
    user_answers[chat_id]["dehydration_text"] = dehydration_text

    bot.send_message(message.chat.id, "–í—ñ—Ç–∞—é üéâ\n" "–¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω–æ, –∞ –í–∞—à—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –æ–ø—Ä–∞—Ü—å–æ–≤—É—é—Ç—å—Å—è\n\n"
                                      "–î—è–∫—É—é –∑–∞ –¥–æ–≤—ñ—Ä—É ü§ç", parse_mode='HTML')
    time.sleep(2)
    bot.send_message(message.chat.id, f"<b>–£ –í–∞—Å</b> {skin_type_text} —à–∫—ñ—Ä–∏.\n"
                                      f"{dehydration_text}.\n"
                                      f"<b>–ó–∞ —à–∫–∞–ª–æ—é –ú—ñ–∑–µ—Ä—ñ –í–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ –æ—Ü—ñ–Ω–∫—É</b>: {score}.\n"
                                      f"–Ü —Ü–µ —Å–≤—ñ–¥—á–∏—Ç—å –ø—Ä–æ —Ç–µ, <b>—â–æ –í–∞—à–∞ —à–∫—ñ—Ä–∞</b> {result}.", parse_mode='HTML')
    time.sleep(4)
    bot.send_message(chat_id, "–Ø–∫—â–æ –±–∞–∂–∞—î—Ç–µ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é –∞–±–æ –≤–∏–Ω–∏–∫–ª–∏ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–∏—Ç–∞–Ω–Ω—è - –Ω–∞—Ç–∏—Å–∫–∞–π—Ç–µ –Ω–∞ –∑—Ä—É—á–Ω–∏–π —Å–ø–æ—Å—ñ–± –∑–≤'—è–∑–∫—É –∑ –Ω–∞—à–∏–º –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–º:", reply_markup=types.InlineKeyboardMarkup().add(
        types.InlineKeyboardButton(text="Telegram", url="https://t.me/consultant_Limitless"),
        types.InlineKeyboardButton(text="Instagram", url="https://www.instagram.com/limitless.shop_/")))

    bot.send_message(chat_id, "–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç –º–∞–≥–∞–∑–∏–Ω—É", reply_markup=types.InlineKeyboardMarkup().add(
        types.InlineKeyboardButton(text="shop", url="https://limitlessua.com/")))
    time.sleep(4)
    bot.send_message(message.chat.id, "–ù–µ –∑–∞–±—É–≤–∞–π—Ç–µ —Å–µ–±–µ –ø—Ä–∏–π–º–∞—Ç–∏, –ª—é–±–∏—Ç–∏ —Ç–∞ —Ç—É—Ä–±—É–≤–∞—Ç–∏—Å—å ü§ç\n\n"
                                      "<b>–í–∞—à–∞ –∫—Ä–∞—Å–∞</b>, –Ω–µ–ø–æ–≤—Ç–æ—Ä–Ω—ñ—Å—Ç—å —Ç–∞ –æ—Å–æ–±–ª–∏–≤—ñ—Å—Ç—å <b>–Ω–µ –º–∞—î –º–µ–∂</b>\n\n"
                                      "<b>–ê –º–∏</b> –∑ —Ä–∞–¥—ñ—Å—Ç—é <b>–¥–æ–ø–æ–º–æ–∂–µ–º–æ</b> –í–∞–º –±—ñ–ª—å—à <b>—Ä–æ–∑—É–º—ñ—Ç–∏</b> –í–∞—à—É —à–∫—ñ—Ä—É —Ç–∞ <b>–ø—ñ–¥–±–∏—Ä–∞—Ç–∏ –¥–æ–≥–ª—è–¥</b> –ø–æ –ø–æ—Ç—Ä–µ–±–∞—Ö ü•∞\n\n"
                                      "–ó –ª—é–±–æ–≤'—é <b>Limitless</b> üå±", parse_mode='HTML')
    send_results_to_admins(chat_id, message.chat.username, skin_type_text, dehydration_text, score, result)
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton(text='–¢–∏—Ü—å', callback_data='button_pressed'))

    bot.send_message(message.chat.id, "–ù–∞—Ç–∏—Å–Ω–∏ —è–∫—â–æ —Ö–æ—á–µ—à –ø—Ä–æ–π—Ç–∏ –∑–Ω–æ–≤—É", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    if call.data == 'button_pressed':
        bot.send_message(call.message.chat.id, "/start")

def send_results_to_admins(chat_id, username, skin_type_text, dehydration_text, score, result):
    text = f"–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {username}:\n" \
           f"–¢–∏–ø —à–∫—ñ—Ä–∏: {skin_type_text}\n" \
           f"–°—Ç–∞–Ω –∑–≤–æ–ª–æ–∂–µ–Ω–æ—Å—Ç—ñ: {dehydration_text}\n" \
           f"–ë–∞–ª–∏: {score}\n" \
           f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}"

    bot.send_message(1580990462, text)
    bot.send_message(5210739777, text)

users = {}

@bot.message_handler(commands=['post'])
def post_handler(message):
    if message.chat.id == 1580990462:
        text = message.text.replace('/post ', '', 1)
for user_id in users:
    try:
        bot.send_message(user_id, text)
    except Exception as e:
        print(f'Error sending message to {user_id}: {e}')

@bot.message_handler(commands=['post'])
def post_handler(message):
    if message.chat.id == 5210739777:
        text = message.text.replace('/post ', '', 1)
        for user_id in users:
            try:
                bot.send_message(user_id, text)
            except Exception as e:
                print(f'Error sending message to {user_id}: {e}')

ADMINS = ['1580990462', '5210739777']

def send_status_message():
    while True:
        for admin_id in ADMINS:
            try:
                bot.send_message(chat_id=admin_id, text="–Ø –¥–æ—Å—ñ –ø—Ä–∞—Ü—é—é!")
            except Exception as e:
                print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")
        time.sleep(7200)

print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π...")
thread = Thread(target=send_status_message)
thread.start()
if __name__ == '__main__':
    print("–ë–æ—Ç –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏. –ù–∞–¥—ñ—à–ª—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –∑–∞–ø—É—Å–∫—É.")
    bot.polling(none_stop=True)